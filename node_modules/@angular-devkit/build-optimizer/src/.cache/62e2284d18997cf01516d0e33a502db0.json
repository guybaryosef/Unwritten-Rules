{"remainingRequest":"/home/guy/projects/unwrittenrules/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/guy/projects/unwrittenrules/node_modules/ng2-slim-loading-bar/src/slim-loading-bar.service.js","dependencies":[{"path":"/home/guy/projects/unwrittenrules/node_modules/ng2-slim-loading-bar/src/slim-loading-bar.service.js","mtime":1491306615000},{"path":"/home/guy/projects/unwrittenrules/node_modules/cache-loader/dist/cjs.js","mtime":1530905984288},{"path":"/home/guy/projects/unwrittenrules/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["// Copyright (C) 2016 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-slim-loading-bar\nimport { Injectable } from '@angular/core';\nimport { isPresent } from './slim-loading-bar.utils';\nimport { Subject } from 'rxjs/Subject';\nexport var SlimLoadingBarEventType = /*@__PURE__*/ (function (SlimLoadingBarEventType) {\n    SlimLoadingBarEventType[SlimLoadingBarEventType[\"PROGRESS\"] = 0] = \"PROGRESS\";\n    SlimLoadingBarEventType[SlimLoadingBarEventType[\"HEIGHT\"] = 1] = \"HEIGHT\";\n    SlimLoadingBarEventType[SlimLoadingBarEventType[\"COLOR\"] = 2] = \"COLOR\";\n    SlimLoadingBarEventType[SlimLoadingBarEventType[\"VISIBLE\"] = 3] = \"VISIBLE\";\n    return SlimLoadingBarEventType;\n})({});\nexport var SlimLoadingBarEvent = /*@__PURE__*/ (function () {\n    function SlimLoadingBarEvent(type, value) {\n        this.type = type;\n        this.value = value;\n    }\n    return SlimLoadingBarEvent;\n}());\n/**\n * SlimLoadingBar service helps manage Slim Loading bar on the top of screen or parent component\n */\nexport var SlimLoadingBarService = /*@__PURE__*/ (function () {\n    function SlimLoadingBarService() {\n        this._progress = 0;\n        this._height = '2px';\n        this._color = 'firebrick';\n        this._visible = true;\n        this._intervalCounterId = 0;\n        this.interval = 500; // in milliseconds\n        this.eventSource = new Subject();\n        this.events = this.eventSource.asObservable();\n    }\n    Object.defineProperty(SlimLoadingBarService.prototype, \"progress\", {\n        get: function () {\n            return this._progress;\n        },\n        set: function (value) {\n            if (isPresent(value)) {\n                if (value > 0) {\n                    this.visible = true;\n                }\n                this._progress = value;\n                this.emitEvent(new SlimLoadingBarEvent(SlimLoadingBarEventType.PROGRESS, this._progress));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SlimLoadingBarService.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        set: function (value) {\n            if (isPresent(value)) {\n                this._height = value;\n                this.emitEvent(new SlimLoadingBarEvent(SlimLoadingBarEventType.HEIGHT, this._height));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SlimLoadingBarService.prototype, \"color\", {\n        get: function () {\n            return this._color;\n        },\n        set: function (value) {\n            if (isPresent(value)) {\n                this._color = value;\n                this.emitEvent(new SlimLoadingBarEvent(SlimLoadingBarEventType.COLOR, this._color));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SlimLoadingBarService.prototype, \"visible\", {\n        get: function () {\n            return this._visible;\n        },\n        set: function (value) {\n            if (isPresent(value)) {\n                this._visible = value;\n                this.emitEvent(new SlimLoadingBarEvent(SlimLoadingBarEventType.VISIBLE, this._visible));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SlimLoadingBarService.prototype.emitEvent = function (event) {\n        if (this.eventSource) {\n            // Push up a new event\n            this.eventSource.next(event);\n        }\n    };\n    SlimLoadingBarService.prototype.start = function (onCompleted) {\n        var _this = this;\n        if (onCompleted === void 0) {\n            onCompleted = null;\n        }\n        // Stop current timer\n        this.stop();\n        // Make it visible for sure\n        this.visible = true;\n        // Run the timer with milliseconds iterval\n        this._intervalCounterId = setInterval(function () {\n            // Increment the progress and update view component\n            _this.progress++;\n            // If the progress is 100% - call complete\n            if (_this.progress === 100) {\n                _this.complete();\n            }\n        }, this.interval);\n    };\n    SlimLoadingBarService.prototype.stop = function () {\n        if (this._intervalCounterId) {\n            clearInterval(this._intervalCounterId);\n            this._intervalCounterId = null;\n        }\n    };\n    SlimLoadingBarService.prototype.reset = function () {\n        this.stop();\n        this.progress = 0;\n    };\n    SlimLoadingBarService.prototype.complete = function () {\n        var _this = this;\n        this.progress = 100;\n        this.stop();\n        setTimeout(function () {\n            // Hide it away\n            _this.visible = false;\n            setTimeout(function () {\n                // Drop to 0\n                _this.progress = 0;\n            }, 250);\n        }, 250);\n    };\n    return SlimLoadingBarService;\n}());\n",null]}